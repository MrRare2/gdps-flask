import re
import base64

class Escape:
    @staticmethod
    def latin(string, trim=0):
        s = re.sub(r'[^A-Za-z0-9 ]', '', string)
        if trim:
            s = s[:trim]
        return s.strip()

    @staticmethod
    def latin_no_spaces(string, trim=0):
        s = re.sub(r'[^A-Za-z0-9]', '', string)
        if trim:
            s = s[:trim]
        return s

    @staticmethod
    def text(string, trim=0):
        if isinstance(string, bytes): string = string.decode()
        pattern = r'[^A-Za-z0-9\[\]\\!\.\?\(\),@#%:\*=+\-—ёЁ\/&_ ]'
        s = re.sub(pattern, '', string)
        if trim:
            s = s[:trim]
        return s.strip()

    @staticmethod
    def multiple_ids(string, trim=0):
        s = re.sub(r'[^0-9,-]', '', string)
        if trim:
            s = s[:trim]
        return s

    @staticmethod
    def number(string, trim=0):
        string = str(string)
        s = re.sub(r'[^0-9]', '', string)
        if trim:
            s = s[:trim]
        if s: return int(s)

    @staticmethod
    def dat(string, trim=0):
        trans_table = str.maketrans({';': ':', ',': '.', '|': '/'})
        s = string.translate(trans_table)
        if trim:
            s = s[:trim]
        return s

    @staticmethod
    def url_base64_decode(data):
        if isinstance(data, str):
            data = data.encode()
        b64 = data.replace(b'-', b'+').replace(b'_', b'/')
        b64 = data + b'=' * (-len(data) % 4)
        return base64.urlsafe_b64decode(data)

    @staticmethod
    def url_base64_encode(data):
        if isinstance(data, str):
            data = data.encode('utf-8')
        #enc = base64.b64encode(data).decode('ascii')
        data = data.replace(b'+', b'-').replace(b'/', b'_')
        return base64.urlsafe_b64encode(data).decode()

    @staticmethod
    def prepare_for_checking(string):
        s = s.lower()
        s = Escape.latin(s)
        lettersToReplace = ['0', '1', '3', '@', 'l', '4', '7', '6', '5', '!', '$']
        replaceLetters   = ['o', 'i', 'e', 'a', 'i', 'a', 't', 'g', 's', 'i', 's']
        for src, dst in zip(lettersToReplace, replaceLetters):
            s = s.replace(src, dst)
        s = re.sub(r'([A-Za-z0-9])\1+', r'\1', s)
        return s

    @staticmethod
    def gd(string):
        s = Escape.text(string)
        return s.translate(str.maketrans({':': ';', '#': 'N'}))

    @staticmethod
    def validate_email(email):
        return re.match(r"[^@]+@[^@]+\.[^@]+", email) is not None

